{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 A Librarian for Your Video Collection\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is a standalone Windows app that will automatically download information for all the videos in your video folders and present it to you in a searchable fashion in order to select a video to watch. This app is designed to be viewed on your TV via an HDMI connection (or other means) to your laptop (e.g. larger fonts).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\i Note: All this information is also available in the application about box.}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Prerequisites\par}
{\pard \ql \f0 \sa180 \li0 \fi0 VideoLibrarian uses .NET Framework 4.8. If you are using a version of Windows prior to Windows 10, then you must first install .NET 4.8. If you attempt to run this utility and .NET Framework 4.8 is NOT installed, this application will fail to run.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You may download and install .NET 4.8 from:\line {\field{\*\fldinst{HYPERLINK "https://dotnet.microsoft.com/en-us/download/dotnet-framework"}}{\fldrslt{\ul
https://dotnet.microsoft.com/en-us/download/dotnet-framework
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Installation\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Copy VideoLibrarian.exe to any new or existing writable directory. Copy the optional companion utilities VideoOrganizer.exe, VideoValidator.exe, and UpdateXml.exe to the same folder. That's it!\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Upon execution, VideoLibrarian.exe will create additional files in the same directory as the executable.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\b VideoLibrarian.log} \u8211- Text file contains status messages. It may be informational, warnings, and errors.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\b VideoLibrarian.SavedState.xml} \u8211- This file contains all the current configuration values.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\b NReco.VideoInfo.dll} \u8211- Used to extract information from the video file.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab {\b ffprobe.exe} \u8211- Used to extract information from the video file.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: Upon first run, Norton Antivirus (or any other AV app) may block VideoLibrarian and VideoOrganizer for suspicious activity as they both query IMDB.com for movie info. Be sure to allow these within your antivirus app. Malicious hackers make it so difficult these days...\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Video Folder Setup\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Within your root video folder, each movie/episode video must be in a separate folder with a matching IMDB movie shortcut (.url). A TV series root folder contains only the main IMDB TV series shortcut as it just refers to all the episodes. The folders may be arranged in any way you see fit so long as the full directory path (not filenames) does not exceed 245 characters (This is a Windows limitation). Any additional files in these folders are ignored. Upon startup, this application will add additional cache files to these folders. See File->Status Log for details.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As an example, your folders may be arranged as follows:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1     videosRoot\line
    \u9500?\u9472?\u9472? video1\line
    \u9474?   \u9500?\u9472?\u9472? anyname.mp4 \u8211- The video file. May be any video format.\line
    \u9474?   \u9492?\u9472?\u9472? anyname.url \u8211- The IMDB movie shortcut.\line
    \u9500?\u9472?\u9472? video2\line
    \u9500?\u9472?\u9472? videoN\line
    \u9500?\u9472?\u9472? tvSeries1\line
    \u9474?   \u9500?\u9472?\u9472? anyname.url \u8211- The IMDB movie shortcut.\line
    \u9474?   \u9500?\u9472?\u9472? episode1\line
    \u9474?   \u9474?   \u9500?\u9472?\u9472? anyname.mp4 \u8211- The video file. May be any video format.\line
    \u9474?   \u9474?   \u9492?\u9472?\u9472? anyname.url \u8211- The IMDB movie shortcut.\line
    \u9474?   \u9500?\u9472?\u9472? episode2\line
    \u9474?   \u9492?\u9472?\u9472? episodeN\line
    \u9500?\u9472?\u9472? tvSeries2\line
    \u9492?\u9472?\u9472? tvSeriesN\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Semi-automatic Video Layout Configurator\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The utility {\i VideoOrganizer.exe} may be used to set up the movie and TV series folders for you. It is not perfect because it attempts to discern the true movie name from the video file name and may occasionally get it wrong. VideoOrganizer.exe must reside in the same folder as {\i VideoLibrarian.exe}. VideoOrganizer.exe will automatically create or update the video folder tree described above. It also includes a movie information editor to customize the information retrieved from IMDB. Click on {\i About} for additional documentation on how to use it.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Video Anti-Corruption Verification\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Because hard drives are not infallible, video files may get corrupted over time. {\i VideoValidator.exe} will go through all your VideoLibrarian videos and validate that they are not corrupted. It does not fix them but it does help you identify them. {\i VideoValidator.exe} is a console application. Run the application with the '/?' argument to get a more comprehensive description regarding usage.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Movie Properties Refresh\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Movie descriptions, ratings, and other properties may change over time, so in order to get the latest information from IMDB, {\i UpdateXML.exe} will update all the xml movie property files in an entire movie folder tree. It will not modify the movie poster images or the Watch flag. All other properties are updated including video validation information. If you are unsure that all the videos are not corrupted, run {\i VideoValidator.exe} first. {\i UpdateXML.exe} is a console application. Run the application with the '/?' argument to get a more comprehensive description regarding usage. As always, everything that is displayed, is also written to UpdateXML.log.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Generated Cache Files\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These cache files reside in the same folders as the shortcut files. They are unique to each shortcut.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab tt1234567.jpg \u8211- downloaded movie poster.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab tt1234567.xml \u8211- extracted movie information.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab tt1234567S.png \u8211- cached UI movie information tile.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab tt1234567M.png \u8211- cached UI movie information tile.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab tt1234567L.png \u8211- cached UI movie information tile.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If any of these files are deleted, they will be recreated. {\i Note:} "tt1234567" also happens to be the IMDB movie code.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Manually Retrieving IMDB Movie Internet Shortcut\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If one does not use VideoOrganizer or VideoOrganizer fails to identify the movie, the shortcut must be manually retrieved from IMDB.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Go to {\field{\*\fldinst{HYPERLINK "https://www.imdb.com/find?s=tt"}}{\fldrslt{\ul
https://www.imdb.com/find?s=tt
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In the web page search box, enter the name of the movie. The results may find more than one entry. Verify by opening the relevant page. Click and drag the link from the browser address bar to the folder with the matching movie.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 First Time VideoLibrarian Startup\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When starting VideoLibrarian for the first time, the root folder(s) containing the videos has not yet been set in VideoLibrarian.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Open the File->Settings dialog to enter your root video folders (you may have more than one root video folder).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When OK is pressed, the movie information will start to be downloaded from the internet. Depending on the number of movies you have, this may take from minutes to hours. {\i Be patient}. This cached information for each movie is stored in the same folder as the video. These files are named tt1234567.xxx. If these files are deleted, they will automatically be regenerated. Once these cached files have been generated, startup will be a whole lot faster. This is the only time the internet is accessed.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Note: Any folder names bracketed by any of the characters {\i ~`'!@#$%^&*()\{\}[].,;+_=-} are ignored (e.g. \u8220"C:\\Users\\User\\Videos\\{\i [FamilyMovies]}\\2005\\TimmysFirstTooth.mp4\u8221"). Any folders that do not contain an IMDB internet shortcut are also ignored.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Review File->Status Log or the VideoLibrarian.log for any possible errors in file generation.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Movie Tile View Modes\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Each UI movie information item is called a \u8216'tile\u8217'. These tiles just fill the window, wrapping from left to right.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The tiles come in 3 sizes, small, medium, and large. \u8216'Large\u8217' displays all the information available, and \u8216'Small\u8217' contains a subset because all the information will not fit. However, many more small tiles will fit on a single page than large tiles. That is the trade-off.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Adding/Changing/Removing/Reorganizing Movies\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Because VideoLibrarian is based directly on the files within a hierarchy of folders, the video folders may be added, moved, renamed, or deleted at any time from {\i Windows Explorer} without any ill effect.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Manually Changing/Correcting Movie Information\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The movie information is all stored in the xml file, tt1234567.xml. Most of the elements are descriptive and can be changed as necessary. If you make any changes, you must delete the tt*.png cache files so these files can be regenerated with your new changes. If you do not want to manually edit this xml file, use {\i VideoOrganizer.exe}. It will allow you to safely update the file without fear of corrupting it.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Changing the Default Movie Poster Image\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When this application gathers the information from the url shortcut you specified, it downloads the first poster image it finds. This image may not be the best poster image. The IMDB movie page actually has many poster images (some in foreign languages). You can manually download a poster image from IMDB or elsewhere and replace the one that VideoLibrarian downloaded. If you do, you must delete the tt*.png cache files so they can be regenerated with your new image embedded. Also for backup, you should also update the poster url in the XML file. The ideal image ratio is 250x365 pixels. Larger images are better so they can be scaled without any loss of image quality.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 Special notes:\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If element {\i EpisodeCount} is greater than zero, the movie information refers to a TV series. A video in this folder is ignored. Child episode subfolders contain the video files.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If element {\i Season} is greater than zero, the movie information refers to a TV series episode.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Element {\i Episode} may be any integer but must be unique within the series.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The episode {\i MovieName} element consists of 2 parts, the series name and episode name (ex. <{\i MovieName}>Eureka - Pilot</{\i MovieName}>). The two names are delimited by a soft-hyphen '\\xAD', {\i not} a regular minus-hyphen \u8216'-\u8216' character. They look alike. If necessary, just copy the \u8216'dash\u8217' from another episode or the soft-hyphen be entered in the text editor via keypad keystroke: Alt+0173. This was done to distinguish between regular dashes as part of the movie or episode names. In some editors the soft-hyphen is not visible. If so, use another text editor like {\i Notepad}.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Features\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Wherever you left off when you exit the app is the same when you restart the app. This includes the size and position of the app window, sort and filter states as well as the last scroll position.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Movie tiles flow from left to right, top to bottom.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Multiple root media folders may be defined. Available through menu File->Settings\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Automatically downloads missing movie information from the internet and caches it for faster startup.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Error/status text log. Available through menu File->Status Log\u8230? The viewer to use may be defined in File->Settings. The default is {\i Notepad}.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab 3 different video info item (aka UI \u8216'tile\u8217') sizes (small, medium, & large). Available through the {\i View} menu.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Sort tiles by multiple properties.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Filter tiles by multiple properties.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab When sorting and filtering, all effort is made to keep the current tile in visible in the window.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Maximum supported videos is 3200. Additional movies are quietly ignored and a warning is written to the log. Note that each entire TV-Series count as one \u8216'movie\u8217'.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Scrolling is supported by clicking and dragging on the scrollbar, mouse wheel, and keyboard arrow keys, Home, End, PageUp, PageDown and Alt-arrow keys. Arrow keys scroll by 1/10 height (or width) of the current tile. Alt-arrow keys scroll by 1 pixel.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Managing your movies is straightforward where one folder = one movie. This makes adding/removing/property-editing easy.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab This is not a Web App. Movies must reside on a local drive/usb drive/network drive.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab This App only runs on Windows 7 thru Windows 11.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Executable is not 'installed'. Just copy app (and 2 optional companion apps) to the folder of your choice. The Windows registry is not used, nor any other folders (except movie source folders) so uninstalling is as simple as deleting the executables.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Only supports movies and home/personal video clips. No audio or image files.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Clicking on title opens the video in your video player (as defined in File->Settings).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Clicking on the description (or small tile body), opens the full summary in a popup window.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Clicking on the location opens containing folder in Windows Explorer.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Clicking on the \u8220"IMDB\u8221" icon, opens the IMDB movie page in your browser (as defined in File->Settings).\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Clicking on the \u8220"Watched\u8221" checkbox, marks the video as \u8216'previously viewed\u8217' and also shows date viewed. One can also filter and sort on this property.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Clicking on the poster will blow up the tile so it fits the full screen (Large tiles only). Click anywhere on the full screen image exits the fullscreen mode. Useful when sitting on the couch.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Screenshots\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: ReadmeImages/TilesLarge.jpg]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: ReadmeImages/TilesMedium.jpg]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: ReadmeImages/TilesSmall.jpg]\cf0}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\cf1 [image: ReadmeImages/FilterSortDialogs.png]\cf0}\line Filter dialog values are computed from the enumerated videos. Sorting may be performed using multiple keys.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Recommended Tools\par}
{\pard \ql \f0 \sa180 \li0 \fi0 These are 3rd party tools that enhance the video management experience. They are not required, but they are sure helpful.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Video Player\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In short, any video player will do. However, if you want a better viewing experience, VideoLAN VLC video player supports all video formats and is open source freeware actively supported by the VideoLAN community. See: {\field{\*\fldinst{HYPERLINK "https://www.videolan.org/"}}{\fldrslt{\ul
https://www.videolan.org/
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Windows Explorer Video Properties Extension\par}
{\pard \ql \f0 \sa180 \li0 \fi0 When it comes to video properties, Windows Explorer only supports a handful of video formats. Most notably, it {\i doesn\u8217't} \u8197?support the popular mkv format! Icaros Shell Extensions (freeware) will support nearly all video and audio formats not supported by Windows Explorer. See: {\field{\*\fldinst{HYPERLINK "https://www.videohelp.com/software/Icaros"}}{\fldrslt{\ul
https://www.videohelp.com/software/Icaros
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Video Conversion\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Invariably, movie videos are extremely large. With the right tool, one can compress a video by 50% without any noticeable differences. There are many video conversion tools out there. Good (and not so good) tools cost money, but the best one that does not require you to be a video expert is the Divx Video Converter (freeware). It may be found at {\field{\*\fldinst{HYPERLINK "https://www.divx.com/en/software/divx"}}{\fldrslt{\ul
https://www.divx.com/en/software/divx
}}}
. It includes a video player but it is not as flexible or comprehensive as the VLC video player.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 If you run into conversion problems, K-Lite Codec Pack contains the most comprehensive set of codecs {\field{\*\fldinst{HYPERLINK "http://www.codecguide.com/download_kl.htm"}}{\fldrslt{\ul
http://www.codecguide.com/download_kl.htm
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Video Properties Viewer\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The popular MediaInfo viewer displays {\i all} the info/properties in any video or audio file. See: {\field{\*\fldinst{HYPERLINK "https://mediaarea.net/en/MediaInfo"}}{\fldrslt{\ul
https://mediaarea.net/en/MediaInfo
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 MKV Properties Editor\par}
{\pard \ql \f0 \sa180 \li0 \fi0 MKVToolNix allows one to add/remove/edit properties and components of a video and save it as an MKV format. It does not perform any video conversion. Most other video formats do not have editable properties. That\u8217's why the MKV video container format is so popular. See: {\field{\*\fldinst{HYPERLINK "https://mkvtoolnix.download"}}{\fldrslt{\ul
https://mkvtoolnix.download
}}}
.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs28 Developer\par}
{\pard \ql \f0 \sa180 \li0 \fi0 With the following exceptions, no 3rd-party source code was used. It was entirely hand-crafted and optimized. It was developed entirely within .Net Framework 4.5 Forms on Visual Studio 2019.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 3rd Party Code\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\field{\*\fldinst{HYPERLINK "https://www.codeproject.com/Articles/624997/Enhanced-Scrollbar"}}{\fldrslt{\ul
https://www.codeproject.com/Articles/624997/Enhanced-Scrollbar
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is used (and slightly modified) because VideoLibrarian is a gallery of tiles that vastly exceeds the maximum size of the default virtual window. As a result, the default windows scroll bars are woefully inadequate.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\field{\*\fldinst{HYPERLINK "https://www.nuget.org/packages/NReco.VideoInfo/"}}{\fldrslt{\ul
https://www.nuget.org/packages/NReco.VideoInfo/
}}}
\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is used to extract media info directly from the video files. It is only used during movie information download.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs24 Design Considerations\par}
{\pard \ql \f0 \sa180 \li0 \fi0 The UI design was inspired by {\field{\*\fldinst{HYPERLINK "https://github.com/damienlangg/SimpleMovieCatalog"}}{\fldrslt{\ul
SimpleMovieCatalog
}}}
 and various torrent servers.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 Requirements\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Organize videos on computer by various properties (view, sort and filter).\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab View on gallery on a TV via HDMI. Must be large enough to see from the couch but also small enough to view a number of them on a single screen.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Must support a LOT of videos (>1000) and be fast.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Must consist of a single executable. No "installation".\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Properties must include things like name, description, genre, movie ratings, release date, etc.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Must be able to retrieve this information from the internet by itself.\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Target audience is a normal computer user. Not a developer or computer expert.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 High-level Design Choices\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab As a web page/javascript? Requires many files. No robust means to gather properties. Not user-friendly installation. Subject to vagaries of browsers.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Target OS? Microsoft Windows. Just because it is what I know and what my laptop runs.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Client-Server (irrespective of language)? Again, not average-user-friendly, higher complexity, and lower maintainability. Does your average user really want a server running all the time?\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab As a standalone app? Easy to run, just drop into folder and execute.\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Language\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab C++ - Workable, but unnecessary complexity and more difficult to maintain.\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab C# - Faster and easier to maintain. There are no performance bottlenecks that low-level C++ needs to overcome. Supporting Win7+. Natively supports requisite https and regex.\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab WinForms? Can support large number of gallery items.\par}
{\pard \ql \f0 \sa0 \li1080 \fi-360 \bullet \tx360\tab WPF? Gallery cannot support large number video tiles.\sa180\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Build Environment\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab .NET Core - Must include requisite .NET assemblies with installation. Ugh!\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab .NET Framework - .NET 4.5 must be installed on Win 7. Already included on Win 8 and Win 10. May create monolithic executable. Our goal.\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Resulting decision - .net Framework Winforms\par}
{\pard \ql \f0 \sa180 \li360 \fi-360 \bullet \tx360\tab Storage - Database vs Folder Hierarchy\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab One or more folder hierarchies. Video folders may be added, moved, renamed, or deleted at any time without any ill effect. Data and video are always synchronized because videos and data are kept together. Additional files may be may exist in the folder like subtitle image, or text files. This is easily maintainable at the expense of a little speed (more on network drives).\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Database with local single monolithic data folder (videos referenced/stored elsewhere) Adding, moving, renaming, or deleting videos is very difficult while maintaining synchronicity. This would require a number maintenance utilities. Synchronization between movies and data are not automatic. This storage choice should be a little faster at the expense of maintainability.\sa180\par}
{\pard \ql \f0 \sa180 \li360 \fi0 Both cases, are very I/O bound. For 5000 videos (we are assuming only 3200 movies and many of which are TV series) we are talking about roughly 40Gb of data and 9TB of videos on various local and remote drives. Ultimately, I chose the folder hierarchy because of less code and synchronization headaches despite performance on network drives. I would suggest SDD and USB hard disk drives.\sa180\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs20 Low-level Design\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Enumerate folder tree by IMDB shortcuts (not movies).\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab TV Series folder does not have a video even though episode folders do.\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Folders bracketed by '!' are ignored. Useful for unformatted folders that may have IMDB shortcuts for other purposes.\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Shortcuts in the root folders are ignored.\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab IMDB shortcuts are the definitive files needed to retrieve and cache the movie properties. Video file names cannot be reliably parsed and used to find the movie on IMDB. See {\i VideoOrganizer.exe}.\sa180\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Created custom FlowLayoutPanel because winforms built-in FlowLayoutPanel control is not designed for galleries.\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Does not support virtual windows > 32768 pixels because Win32 scrollbars do not support scrolling > 32768.\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Does not support child panels (e.g. tiles)\par}
{\pard \ql \f0 \sa0 \li720 \fi-360 \endash \tx360\tab Does not support large number of controls (very very slow).\sa180\par}
{\pard \ql \f0 \sa0 \li360 \fi-360 \bullet \tx360\tab Cannot have large number of repeating panels with many controls (gallery) due to limited limited number of windows handles (an OS resource) allowed per application. For efficiency, created panels/tiles consisting of background image containing no more than 2 real controls. As a result, VideoLibrarian can support up to 3200 movies (TV Series count as one movie).\sa180\par}
}
